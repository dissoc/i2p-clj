#+TITLE:     i2p-clj
#+AUTHOR:    Justin Bishop
#+LANGUAGE:  en
#+EMAIL:     (concat "mail" @ "dissoc.me")
#+TAGS:      clojure clj i2p anonymous

#+OPTIONS: num:nil
#+OPTIONS: toc:nil

i2p-clj is a clojure wrapper for the i2p network.

the test directory provides examples on how to use library

Important: please note that the certificates in the ./certificates/ directory
must be included.

* installation
To install the extension run the command:
#+BEGIN_SRC sh :results output
  lein test
  lein install
#+END_SRC

* example
refer to tests for a more comprehensive example
#+BEGIN_SRC clojure
    ;;; ...

  (def server (create-i2p-socket-server
               {:destination-key   server-dest-key
                :connection-filter (fn [address]
                                     (check-address address))
                ;; if connection accepted on-receive fn is invoked
                :on-receive (fn [{:keys [server-socket
                                         peer-address ;clients address
                                         server-address ;this server's address
                                         input-stream
                                         data-input-stream
                                         output-stream
                                         data-output-stream]}]
                              ;; you can use server-socket to
                              ;; destroy session conditionally
                              ;; or other actions on the socket itself

                              ;; note the helper function reader is used.
                              ;; the first byte sent in a message is the size
                              ;; of the total message. reader handles reading
                              ;; the full message based on the size
                              (let [msg-from-client (reader data-input-stream)]
                                ;; echoes the message back to client
                                ;; notice that sender is also used to complement
                                ;; reader. first byte is size of total message
                                (sender data-output-stream msg-from-client)))}))

  (def client (create-i2p-socket-client
               {:destination-key   client-dest-key
                :remote-address    remote-address
                :connection-filter (fn [_] true)
                :on-receive on-receive}))

  (def client-dos (:data-output-stream client))


  (sender client-dos "hello from client") ;; sent over wire as transit
#+END_SRC
* TODOs
** DONE start the handler during the creation of the server or client
CLOSED: [2025-07-09 Wed 18:57]
** TODO Implement server and client restart/reconnect
if disconnection while running then reconnect.  retry on initial connection
attempt is already implemented
** TODO deploy to artifacts
